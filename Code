1. Write a program to calculate the Factorial of a number using recursive and non- recursive method
#include <iostream>
using namespace std;
int factorialRecursive(int n)
{
    if (n == 0)
        return 1;
    return n * factorialRecursive(n - 1);
}
int factorialNonRecursive(int n)
{
    int result = 1;
    for (int i = 1; i <= n; i++)
    {
        result *= i;
    }
    return result;
}

int main()
{
    int num;
    cin >> num;

    if (num < 0)
    {

        return 1;
    }
    int factRecursive = factorialRecursive(num);
    cout << "Factorial (Recursive): " << factRecursive << endl;
    int factNonRecursive = factorialNonRecursive(num);
    cout << "Factorial (Non-Recursive): " << factNonRecursive << endl;

    return 0;
}
2. Write a program to find the nth term F1 of the Fibonacci sequence using recursive and non-recursive method.
#include <iostream>
using namespace std;
int fibonacciRecursive(int n)
{
    if (n == 0)
        return 0;
    if (n == 1)
        return 1;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}
int fibonacciNonRecursive(int n)
{
    if (n == 0)
        return 0;
    if (n == 1)
        return 1;

    int a = 0, b = 1, fib = 0;
    for (int i = 2; i <= n; i++)
    {
        fib = a + b;
        a = b;
        b = fib;
    }
    return fib;
}

int main()
{
    int n;
    cin >> n;

    if (n < 0)
    {

        return 1;
    }

    int fibRecursive = fibonacciRecursive(n);
    cout << "Fibonacci (Recursive): " << fibRecursive << endl;

    int fibNonRecursive = fibonacciNonRecursive(n);
    cout << "Fibonacci (Non-Recursive): " << fibNonRecursive << endl;

    return 0;
}
3. Tower of Hanoi Problem
#include <iostream>
using namespace std;
void towerOfHanoi(int n, char source, char destination, char auxiliary)
{
    if (n == 1)
    {
        cout << "Move disk 1 from " << source << " to " << destination << endl;
        return;
    }
    towerOfHanoi(n - 1, source, auxiliary, destination);
    cout << "Move disk " << n << " from " << source << " to " << destination << endl;
    towerOfHanoi(n - 1, auxiliary, destination, source);
}
int main()
{
    int n;
    cout << "Enter the number of disks: ";
    cin >> n;
    towerOfHanoi(n, 'A', 'C', 'B');

    return 0;
}
4. Ackermann Function
#include <iostream>
using namespace std;
int ackermann(int m, int n)
{
    if (m == 0)
        return n + 1;
    else if (n == 0)
        return ackermann(m - 1, 1);
    else
        return ackermann(m - 1, ackermann(m, n - 1));
}
int main()
{
    int m, n;
    cin >> m >> n;
    int result = ackermann(m, n);
    cout << "Ackermann(" << m << ", " << n << ") = " << result << endl;
    return 0;
}
5. Binary Search Tree (BST) Creation,Traversal,Search,Delete
#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int value)
{
    Node* newNode = new Node();
    newNode->data = value;
    newNode->left = newNode->right = nullptr;
    return newNode;
}
Node* insert(Node* root, int value)
{
    if (root == nullptr)
        return createNode(value);

    if (value < root->data)
        root->left = insert(root->left, value);
    else
        root->right = insert(root->right, value);

    return root;
}
void inorder(Node* root)
{
    if (root != nullptr)
    {
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }
}
void preorder(Node* root)
{
    if (root != nullptr)
    {
        cout << root->data << " ";
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(Node* root)
{
    if (root != nullptr)
    {
        postorder(root->left);
        postorder(root->right);
        cout << root->data << " ";
    }
}
bool search(Node* root, int key)
{
    if (root == nullptr)
        return false;

    if (root->data == key)
        return true;

    if (key < root->data)
        return search(root->left, key);

    return search(root->right, key);
}
Node* findMin(Node* root)
{
    while (root->left != nullptr)
        root = root->left;
    return root;
}

Node* deleteNode(Node* root, int key)
{
    if (root == nullptr)
        return root;

    if (key < root->data)
        root->left = deleteNode(root->left, key);
    else if (key > root->data)
        root->right = deleteNode(root->right, key);
    else
    {
        if (root->left == nullptr)
        {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == nullptr)
        {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
int main()
{
    Node* root = nullptr;
    int n, value;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> value;
        root = insert(root, value);
    }
    cout << "Inorder Traversal: ";
    inorder(root);
    cout << endl;
    cout << "Preorder Traversal: ";
    preorder(root);
    cout << endl;
    cout << "Postorder Traversal: ";
    postorder(root);
    cout << endl;
    int key1;
    cin>>key1;
    if (search(root, key1))
        cout << "Value found in the BST" << endl;
    else
        cout << "Value not found in the BST" << endl;
    int key2;
    cin>>key2;
    root = deleteNode(root, key2);
    inorder(root);
    cout << endl;
    return 0;
}
8.Create a Maxheap and Display its Elements  and Delete an Element
#include <iostream>
#include <vector>
using namespace std;

void heapifyUp(vector<int>& heap, int index)
{
    while (index > 0)
    {
        int parent = (index - 1) / 2;
        if (heap[index] > heap[parent])
        {
            swap(heap[index], heap[parent]);
            index = parent;
        }
        else
        {
            break;
        }
    }
}

void heapifyDown(vector<int>& heap, int index)
{
    int size = heap.size();
    while (true)
    {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;
        if (leftChild < size && heap[leftChild] > heap[largest])
            largest = leftChild;
        if (rightChild < size && heap[rightChild] > heap[largest])
            largest = rightChild;
        if (largest == index) break;
        swap(heap[index], heap[largest]);
        index = largest;
    }
}

void insert(vector<int>& heap, int value)
{
    heap.push_back(value);
    heapifyUp(heap, heap.size() - 1);
}

void deleteelement(vector<int>& heap, int index)
{
    if (index < 0 || index >= heap.size())
    {
        cout << "Invalid index!\n";
        return;
    }

    heap[index] = heap.back();
    heap.pop_back();            

    heapifyDown(heap, index);   
    heapifyUp(heap, index);     
}
void display(vector<int>& heap)
{
    for (int i = 0; i < heap.size(); i++)
    {
        cout << heap[i] << " ";
    }
    cout << endl;
}

int main()
{
    vector<int> heap;
    int n, value, index;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> value;
        insert(heap, value);
    }
    display(heap);
    cin >> index;
    deleteelement(heap, index);
    display(heap);
    return 0;
}
9. Heap Sort Algorithm
#include <iostream>
#include <vector>
using namespace std;
void heapify(vector<int>& heap, int n, int i)
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
    if (left < n && heap[left] > heap[largest])
        largest = left;
    if (right < n && heap[right] > heap[largest])
        largest = right;
    if (largest != i)
    {
        swap(heap[i], heap[largest]);
        heapify(heap, n, largest);
    }
}
void heapSort(vector<int>& heap)
{
    int n = heap.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(heap, n, i);
    for (int i = n - 1; i >= 1; i--)
    {
        swap(heap[0], heap[i]);
        heapify(heap, i, 0);
    }
}
void display(const vector<int>& heap)
{
    for (int val : heap)
        cout << val << " ";
    cout << endl;
}
int main()
{
    int n;
    cin >> n;

    vector<int> nums(n);
    for (int i = 0; i < n; i++)
    {
        cin >> nums[i];
    }
    heapSort(nums);
    display(nums);
    return 0;
}
11. Display the Adjacency Matrix of a Graph
#include <iostream>
#include <vector>
using namespace std;
void displayAdjMatrix(int n, vector<vector<int>>& adjMatrix) {
    cout << "Adjacency Matrix:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << adjMatrix[i][j] << " ";
        }
        cout << endl;
    }
}
int main() {
    int n, e, u, v;
    cout << "Enter the number of vertices: ";
    cin >> n;
    vector<vector<int>> adjMatrix(n, vector<int>(n, 0));
    cout << "Enter the number of edges: ";
    cin >> e;
    cout << "Enter the edges (u v):\n";
    for (int i = 0; i < e; i++) {
        cin >> u >> v;
        adjMatrix[u][v] = adjMatrix[v][u] = 1;
    }
    displayAdjMatrix(n, adjMatrix);
    return 0;
}
12. Display the Adjacency List of a Graph
#include <iostream>
#include <vector>
using namespace std;
void displayAdjList(int n, vector<vector<int>>& adjList) {
    cout << "Adjacency List:\n";
    for (int i = 0; i < n; i++) {
        cout << i << ": ";
        for (int v : adjList[i]) {
            cout << v << " ";
        }
        cout << endl;
    }
}
int main() {
    int n, e, u, v;
    cout << "Enter the number of vertices: ";
    cin >> n;
    vector<vector<int>> adjList(n);
    cout << "Enter the number of edges: ";
    cin >> e;
    cout << "Enter the edges (u v):\n";
    for (int i = 0; i < e; i++) {
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    displayAdjList(n, adjList);
    return 0;
}
13. Breadth-First Search (BFS) Traversal
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
void BFS(int start, int n, vector<vector<int>>& adjList) {
    vector<bool> visited(n, false);
    queue<int> q;
    visited[start] = true;
    q.push(start);
    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";
        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
    cout << endl;
}
int main() {
    int n, e, u, v, start;
    cout << "Enter the number of vertices: ";
    cin >> n;
    vector<vector<int>> adjList(n);
    cout << "Enter the number of edges: ";
    cin >> e;
    cout << "Enter the edges (u v):\n";
    for (int i = 0; i < e; i++) {
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    cout << "Enter the starting vertex for BFS: ";
    cin >> start;
    BFS(start, n, adjList);
    return 0;
}
14. Depth-First Search (DFS) Traversal
#include <iostream>
#include <vector>
#include <stack>
using namespace std;
void DFS(int start, int n, vector<vector<int>>& adjList) {
    vector<bool> visited(n, false);
    stack<int> s;
    s.push(start);
    cout << "DFS Traversal: ";
    while (!s.empty()) {
        int node = s.top();
        s.pop();
        if (!visited[node]) {
            visited[node] = true;
            cout << node << " ";
            for (int neighbor : adjList[node]) {
                if (!visited[neighbor]) {
                    s.push(neighbor);
                }
            }
        }
    }
    cout << endl;
}
int main() {
    int n, e, u, v, start;
    cout << "Enter the number of vertices: ";
    cin >> n;
    vector<vector<int>> adjList(n);
    cout << "Enter the number of edges: ";
    cin >> e;
    cout << "Enter the edges (u v):\n";
    for (int i = 0; i < e; i++) {
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    cout << "Enter the starting vertex for DFS: ";
    cin >> start;
    DFS(start, n, adjList);
    return 0;
}
15. Fibonacci Sequence for nth Fibonacci Number
#include <iostream>
using namespace std;
int fibonacci(int n) {
    if (n <= 1) return 1;
    int a = 1, b = 1, result;
    for (int i = 2; i <= n; i++) {
        result = a + b;
        a = b;
        b = result;
    }
    return result;
}
int main() {
    int n;
    cout << "Enter the value of n (n <= 500): ";
    cin >> n;
    if (n > 500) {
        cout << "n should be less than or equal to 500.\n";
        return 1;
    }
    cout << "Fibonacci(" << n << ") = " << fibonacci(n) << endl;
    return 0;
}
